/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scripts_data_fetcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scripts/data_fetcher */ \"./src/scripts/data_fetcher.js\");\n/* harmony import */ var _scripts_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scripts/view */ \"./src/scripts/view.js\");\n/* harmony import */ var _scripts_player__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scripts/player */ \"./src/scripts/player.js\");\n\n\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  let view = new _scripts_view__WEBPACK_IMPORTED_MODULE_1__[\"default\"](document);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUdBRyxRQUFRLENBQUNDLGdCQUFULENBQTBCLGtCQUExQixFQUE4QyxNQUFNO0FBQ2hELE1BQUlDLElBQUksR0FBRyxJQUFJSixxREFBSixDQUFTRSxRQUFULENBQVg7QUFDSCxDQUZEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vTkJBLVN0YXQtRGFzaGJvYXJkLy4vc3JjL2luZGV4LmpzP2I2MzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IERhdGFGZXRjaGVyIGZyb20gXCIuL3NjcmlwdHMvZGF0YV9mZXRjaGVyXCI7XG5pbXBvcnQgVmlldyBmcm9tIFwiLi9zY3JpcHRzL3ZpZXdcIjtcbmltcG9ydCBQbGF5ZXIgZnJvbSBcIi4vc2NyaXB0cy9wbGF5ZXJcIjtcblxuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCAoKSA9PiB7XG4gICAgbGV0IHZpZXcgPSBuZXcgVmlldyhkb2N1bWVudCk7XG59KTsiXSwibmFtZXMiOlsiRGF0YUZldGNoZXIiLCJWaWV3IiwiUGxheWVyIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwidmlldyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scripts/data_fetcher.js":
/*!*************************************!*\
  !*** ./src/scripts/data_fetcher.js ***!
  \*************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\nconst DataFetcher = {\n  //Gets player information from the backend (then from API)\n  getPlayer: async function (query) {\n    const response = await fetch(`/search?searchTerm=${encodeURIComponent(query)}`);\n\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n\n    const playerData = await response.json();\n    return playerData;\n  },\n  //Gets season average information for all selected players from the backend (then from API)\n  getSeasonAverages: async function (season, players) {\n    let playerIds = [];\n    players.forEach(player => {\n      playerIds.push(player.id);\n    });\n    const response = await fetch(`/season-average?season=${encodeURIComponent(season)}&playerId=${encodeURIComponent(JSON.stringify(playerIds))}`);\n\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n\n    const playerData = await response.json();\n    return playerData;\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (DataFetcher);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9kYXRhX2ZldGNoZXIuanMuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLFdBQVcsR0FBRztBQUNoQjtBQUNBQyxFQUFBQSxTQUFTLEVBQUUsZ0JBQWVDLEtBQWYsRUFBc0I7QUFDN0IsVUFBTUMsUUFBUSxHQUFHLE1BQU1DLEtBQUssQ0FBRSxzQkFBcUJDLGtCQUFrQixDQUFDSCxLQUFELENBQVEsRUFBakQsQ0FBNUI7O0FBQ0EsUUFBSSxDQUFDQyxRQUFRLENBQUNHLEVBQWQsRUFBa0I7QUFDZCxZQUFNLElBQUlDLEtBQUosQ0FBVSw2QkFBVixDQUFOO0FBQ0g7O0FBQ0QsVUFBTUMsVUFBVSxHQUFHLE1BQU1MLFFBQVEsQ0FBQ00sSUFBVCxFQUF6QjtBQUNBLFdBQU9ELFVBQVA7QUFDSCxHQVRlO0FBV2hCO0FBQ0FFLEVBQUFBLGlCQUFpQixFQUFFLGdCQUFlQyxNQUFmLEVBQXVCQyxPQUF2QixFQUFnQztBQUMvQyxRQUFJQyxTQUFTLEdBQUcsRUFBaEI7QUFDQUQsSUFBQUEsT0FBTyxDQUFDRSxPQUFSLENBQWlCQyxNQUFELElBQVk7QUFDeEJGLE1BQUFBLFNBQVMsQ0FBQ0csSUFBVixDQUFlRCxNQUFNLENBQUNFLEVBQXRCO0FBQ0gsS0FGRDtBQUdBLFVBQU1kLFFBQVEsR0FBRyxNQUFNQyxLQUFLLENBQUUsMEJBQXlCQyxrQkFBa0IsQ0FBQ00sTUFBRCxDQUFTLGFBQVlOLGtCQUFrQixDQUFDYSxJQUFJLENBQUNDLFNBQUwsQ0FBZU4sU0FBZixDQUFELENBQTRCLEVBQWhILENBQTVCOztBQUNBLFFBQUksQ0FBQ1YsUUFBUSxDQUFDRyxFQUFkLEVBQWtCO0FBQ2QsWUFBTSxJQUFJQyxLQUFKLENBQVUsNkJBQVYsQ0FBTjtBQUNIOztBQUNELFVBQU1DLFVBQVUsR0FBRyxNQUFNTCxRQUFRLENBQUNNLElBQVQsRUFBekI7QUFDQSxXQUFPRCxVQUFQO0FBQ0g7QUF2QmUsQ0FBcEI7QUEwQkEsK0RBQWVSLFdBQWYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9OQkEtU3RhdC1EYXNoYm9hcmQvLi9zcmMvc2NyaXB0cy9kYXRhX2ZldGNoZXIuanM/Nzk3MCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBEYXRhRmV0Y2hlciA9IHtcbiAgICAvL0dldHMgcGxheWVyIGluZm9ybWF0aW9uIGZyb20gdGhlIGJhY2tlbmQgKHRoZW4gZnJvbSBBUEkpXG4gICAgZ2V0UGxheWVyOiBhc3luYyBmdW5jdGlvbihxdWVyeSkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAvc2VhcmNoP3NlYXJjaFRlcm09JHtlbmNvZGVVUklDb21wb25lbnQocXVlcnkpfWApO1xuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05ldHdvcmsgcmVzcG9uc2Ugd2FzIG5vdCBvaycpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBsYXllckRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCkgXG4gICAgICAgIHJldHVybiBwbGF5ZXJEYXRhO1xuICAgIH0sXG5cbiAgICAvL0dldHMgc2Vhc29uIGF2ZXJhZ2UgaW5mb3JtYXRpb24gZm9yIGFsbCBzZWxlY3RlZCBwbGF5ZXJzIGZyb20gdGhlIGJhY2tlbmQgKHRoZW4gZnJvbSBBUEkpXG4gICAgZ2V0U2Vhc29uQXZlcmFnZXM6IGFzeW5jIGZ1bmN0aW9uKHNlYXNvbiwgcGxheWVycykge1xuICAgICAgICBsZXQgcGxheWVySWRzID0gW107XG4gICAgICAgIHBsYXllcnMuZm9yRWFjaCgocGxheWVyKSA9PiB7XG4gICAgICAgICAgICBwbGF5ZXJJZHMucHVzaChwbGF5ZXIuaWQpO1xuICAgICAgICB9KVxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAvc2Vhc29uLWF2ZXJhZ2U/c2Vhc29uPSR7ZW5jb2RlVVJJQ29tcG9uZW50KHNlYXNvbil9JnBsYXllcklkPSR7ZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHBsYXllcklkcykpfWApO1xuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05ldHdvcmsgcmVzcG9uc2Ugd2FzIG5vdCBvaycpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBsYXllckRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKClcbiAgICAgICAgcmV0dXJuIHBsYXllckRhdGE7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBEYXRhRmV0Y2hlcjsiXSwibmFtZXMiOlsiRGF0YUZldGNoZXIiLCJnZXRQbGF5ZXIiLCJxdWVyeSIsInJlc3BvbnNlIiwiZmV0Y2giLCJlbmNvZGVVUklDb21wb25lbnQiLCJvayIsIkVycm9yIiwicGxheWVyRGF0YSIsImpzb24iLCJnZXRTZWFzb25BdmVyYWdlcyIsInNlYXNvbiIsInBsYXllcnMiLCJwbGF5ZXJJZHMiLCJmb3JFYWNoIiwicGxheWVyIiwicHVzaCIsImlkIiwiSlNPTiIsInN0cmluZ2lmeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scripts/data_fetcher.js\n");

/***/ }),

/***/ "./src/scripts/data_visual.js":
/*!************************************!*\
  !*** ./src/scripts/data_visual.js ***!
  \************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ DataVisual; }\n/* harmony export */ });\nclass DataVisual {\n  constructor() {\n    //set the dimensions of the graph\n    this.margin = {\n      top: 10,\n      right: 30,\n      bottom: 30,\n      left: 60\n    }, this.width = 1300 - this.margin.left - this.margin.right, this.height = 600 - this.margin.top - this.margin.bottom;\n  } //Used as a controller to direct to the correct draw chart method\n\n\n  drawChart(tag, seasons, chartData) {\n    this.metricLabel = chartData[0].metricLabel;\n\n    switch (tag) {\n      case \"line\":\n        this.drawLineChart(seasons, chartData);\n        break;\n\n      case \"bar\":\n        this.drawBarChart(seasons, chartData);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  drawLineChart(seasons, chartData) {\n    let svg = this.getSVG(); //Group the data by player\n\n    let players = d3.nest().key(d => d.name).entries(chartData); // X axis\n\n    let x = d3.scaleLinear().domain(d3.extent(chartData, d => d.season)).range([0, 1000]);\n    svg.append(\"g\").attr(\"class\", \"axis\").attr(\"transform\", \"translate(0,\" + this.height + \")\").call(d3.axisBottom().scale(x).tickFormat(d3.format('d')).tickValues(d3.range(Math.min.apply(Math, seasons), Math.max.apply(Math, seasons) + 1, 1))); // Y axis\n\n    let y = d3.scaleLinear().domain([d3.min(chartData, d => d.metric) * .95, d3.max(chartData, d => d.metric)]).range([this.height, 30]);\n    svg.append(\"g\").call(d3.axisLeft().scale(y));\n    this.addYAxisLabel(svg);\n    let playerNames = players.map(function (d) {\n      return d.key;\n    }); // list of players\n\n    let color = this.getColor(playerNames); // Add the lines\n\n    svg.selectAll(\".line\").data(players).enter().append(\"path\").attr(\"class\", \"line\").attr(\"id\", (d, i) => {\n      return i;\n    }).attr(\"fill\", \"none\").attr(\"stroke\", d => color(d.key)).attr(\"stroke-width\", 3).style(\"opacity\", \"0\").attr(\"d\", function (d) {\n      return d3.line().curve(d3.curveCardinal).defined(d => d.metric !== 0).x(d => x(d.season)).y(d => y(d.metric))(d.values);\n    });\n    d3.selectAll(\".line\").each((d, i) => {\n      debugger;\n      let currentLine = `#line${i}`;\n      let totalLength = d3.select(\".line\").node().getTotalLength();\n      d3.selectAll(currentLine).attr(\"stroke-dasharray\", totalLength + \" \" + totalLength).attr(\"stroke-dashoffset\", totalLength).transition().duration(5000).delay(100 * i).attr(\"stroke-dashoffset\", 0).style(\"opacity\", \"1\");\n    });\n    this.addLegend(players, color);\n    this.addTitle(seasons);\n  }\n\n  drawBarChart(seasons, chartData) {\n    let svg = this.getSVG(); //Create values array from Y axis - min and max\n\n    let values = [];\n    chartData.forEach(row => {\n      Object.keys(row).forEach(key => {\n        if (key !== \"season\" && key !== 'metricLabel') {\n          values.push(row[key]);\n        }\n      });\n    }); //Get each player for subgroups (remove season and metriclabel)\n\n    let players = chartData.map(row => Object.keys(row));\n    players = players[0].slice(1, players[0].length - 1); // X axis\n\n    let x = d3.scaleBand().domain(seasons).range([0, 1000]).padding([0.2]);\n    svg.append(\"g\").attr(\"class\", \"x axis\").attr(\"transform\", \"translate(0,\" + this.height + \")\").style(\"font-weight\", 600).call(d3.axisBottom(x).tickFormat(d3.format('d')).tickSize(0)); // X Axis - subgroup for players\n\n    let xSubgroup = d3.scaleBand().domain(players).range([0, x.bandwidth()]); //Y Axis\n\n    var y = d3.scaleLinear().domain([d3.min(values, d => d) * .50, d3.max(values, d => d) * 1.25]).range([this.height, 30]);\n    svg.append(\"g\").call(d3.axisLeft(y));\n    this.addYAxisLabel(svg);\n    let color = this.getColor(players);\n    let toolTip = d3.select(\"#chart-tool-tip\"); // Show the bars\n\n    let bars = svg.append(\"g\").selectAll(\"g\").data(chartData).enter().append(\"g\").attr(\"transform\", function (d) {\n      return \"translate(\" + x(d.season) + \",0)\";\n    });\n    bars.selectAll(\"rect\").data(function (d) {\n      return players.map(function (key) {\n        return {\n          key: key,\n          value: d[key]\n        };\n      });\n    }).enter().append(\"rect\").attr(\"x\", function (d) {\n      return xSubgroup(d.key);\n    }).attr(\"width\", xSubgroup.bandwidth()).attr(\"y\", function (d) {\n      return y(0);\n    }).attr(\"height\", function (d) {\n      // if(this.height - y(0) < 0) {\n      //     return this.height;\n      // } else {\n      return this.height - y(0); // }\n    }.bind(this)).attr(\"fill\", function (d) {\n      return color(d.key);\n    }).attr(\"value\", function (d) {\n      return d.value;\n    }).attr(\"idx\", function (d) {\n      return d.idx;\n    }).on(\"mouseover\", function (d) {\n      toolTip.style(\"left\", d3.event.pageX + 10 + \"px\");\n      toolTip.style(\"top\", d3.event.pageY - 35 + \"px\");\n      toolTip.style(\"display\", \"inline-block\");\n      toolTip.style(\"opacity\", \"0.9\"); //Get the data associated with bar hovered over\n\n      let barData = this.__data__;\n      toolTip.html(barData.key + \"<br>\" + barData.value);\n      d3.select(this).style(\"fill\", \"#FFFF99\").style(\"stroke\", \"Black\").style(\"stroke-width\", \"1.8px\").style(\"stroke-opacity\", \"1\");\n    }).on(\"mouseout\", function (d) {\n      d3.select(this).style(\"fill\", color(d.key)).transition().duration(250).style(\"stroke-opacity\", \"0\");\n      toolTip.style(\"display\", \"none\");\n    });\n    bars.selectAll(\"rect\").transition().delay(function (d) {\n      return Math.random() * 1000;\n    }).duration(1000).attr(\"y\", function (d) {\n      return y(d.value);\n    }).attr(\"height\", function (d) {\n      return this.height - y(d.value);\n    }.bind(this));\n    let legendData = players.map(player => {\n      return {\n        key: player,\n        value: player\n      };\n    });\n    this.addLegend(legendData, color);\n    this.addTitle(seasons);\n  } //Clear the current chart\n\n\n  reset() {\n    d3.selectAll(\"svg\").remove();\n  } //The following methods will be used by each chart\n  //get label based on selected metric\n\n\n  getLabel(metricLabel) {\n    switch (metricLabel) {\n      case \"ppg\":\n        return \"Points per Game\";\n\n      case \"apg\":\n        return \"Assists per Game\";\n\n      case \"rpg\":\n        return \"Rebounds per Game\";\n\n      case \"spg\":\n        return \"Steals per Game\";\n\n      case \"fg_pct\":\n        return \"Field Goal %\";\n\n      case \"fg3_pct\":\n        return \"3pt %\";\n\n      default:\n        break;\n    }\n  } //return the svg to render the chart on\n\n\n  getSVG() {\n    return d3.select(\"#data-visualization\").append(\"svg\").attr(\"id\", \"svg\").attr(\"width\", this.width + this.margin.left + this.margin.right).attr(\"height\", this.height + this.margin.top + this.margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + this.margin.left + \",\" + this.margin.top + \")\");\n  }\n\n  addXAxisLabel(svg) {\n    svg.append(\"text\").attr(\"class\", \"axis-label\").attr(\"text-anchor\", \"end\").attr(\"x\", 520).attr(\"y\", this.height + 28).text(\"Season\");\n  }\n\n  addYAxisLabel(svg) {\n    svg.append(\"text\").attr(\"class\", \"axis-label\").attr(\"text-anchor\", \"end\").attr(\"y\", -50).attr(\"x\", -this.height / 3).attr(\"dy\", \".75em\").attr(\"transform\", \"rotate(-90)\").text(this.getLabel(this.metricLabel));\n  } //[\"#e60049\", \"#0bb4ff\", \"#50e991\", \"#e6d800\", \"#9b19f5\", \"#ffa300\", \"#dc0ab4\", \"#b3d4ff\", \"#00bfa0\"]\n\n\n  getColor(playerNames) {\n    return d3.scaleOrdinal().domain(playerNames).range(['#003f5c', '#7a5195', '#bc4f90', '#ef5675', '#ff764a', '#ffa600']);\n  } //add legend to the current chart\n\n\n  addLegend(players, color) {\n    let legend = d3.select(\"svg\").selectAll('g.legend').data(players).enter().append(\"g\").attr(\"class\", \"legend\").style(\"opacity\", \"0\");\n    legend.append(\"circle\").attr(\"cx\", 1100).attr('cy', (d, i) => i * 30 + 350).attr(\"r\", 6).style(\"fill\", d => color(d.key));\n    legend.append(\"text\").attr(\"x\", 1120).attr(\"y\", (d, i) => i * 30 + 355).text(d => d.key);\n    legend.transition().duration(500).delay(function (d, i) {\n      return 1300 + 100 * i;\n    }).style(\"opacity\", \"1\");\n  } //add title to the current chart\n\n\n  addTitle(seasons) {\n    d3.select(\"svg\").append(\"text\").attr(\"x\", this.margin.left).attr(\"y\", 20).attr(\"text-anchor\", \"left\").text(`${this.getLabel(this.metricLabel)} from ${seasons[0]} to ${seasons[seasons.length - 1]}`).style(\"fill\", \"black\").style(\"font-size\", 16).style(\"font-family\", \"Arial Black\");\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/data_visual.js\n");

/***/ }),

/***/ "./src/scripts/player.js":
/*!*******************************!*\
  !*** ./src/scripts/player.js ***!
  \*******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Player; }\n/* harmony export */ });\nclass Player {\n  constructor(options) {\n    this.fname = options.first_name;\n    this.lname = options.last_name;\n    this.id = options.id;\n    this.ppg = []; //points per game\n\n    this.apg = []; //assists per game\n\n    this.rpg = []; //rebounds per game\n\n    this.spg = []; //steals per game\n\n    this.fg_pct = []; //fg percentage\n\n    this.fg3_pct = []; //3 point percentage\n  }\n\n  updateAverages(season, averages) {\n    season = parseInt(season);\n\n    if (averages) {\n      this.ppg.push([season, averages.pts]);\n      this.apg.push([season, averages.ast]);\n      this.rpg.push([season, averages.reb]);\n      this.spg.push([season, averages.stl]);\n      this.fg_pct.push([season, averages.fg_pct]);\n      this.fg3_pct.push([season, averages.fg3_pct]);\n    } else {\n      this.ppg.push([season, 0]);\n      this.apg.push([season, 0]);\n      this.rpg.push([season, 0]);\n      this.spg.push([season, 0]);\n      this.fg_pct.push([season, 0]);\n      this.fg3_pct.push([season, 0]);\n    }\n\n    this.sortAverages();\n  }\n\n  sortAverages() {\n    this.ppg = this.ppg.sort((a, b) => a[0] > b[0] ? 1 : -1);\n    this.apg = this.apg.sort((a, b) => a[0] > b[0] ? 1 : -1);\n    this.rpg = this.rpg.sort((a, b) => a[0] > b[0] ? 1 : -1);\n    this.spg = this.spg.sort((a, b) => a[0] > b[0] ? 1 : -1);\n    this.fg_pct = this.fg_pct.sort((a, b) => a[0] > b[0] ? 1 : -1);\n    this.fg3_pct = this.fg3_pct.sort((a, b) => a[0] > b[0] ? 1 : -1);\n  }\n\n  resetAverages() {\n    this.ppg = [];\n    this.apg = [];\n    this.rpg = [];\n    this.spg = [];\n    this.fg_pct = [];\n    this.fg3_pct = [];\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFELEVBQUlDLENBQUosS0FBVUQsQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFPQyxDQUFDLENBQUMsQ0FBRCxDQUFSLEdBQWMsQ0FBZCxHQUFrQixDQUFDLENBQTNDLENBQVg7QUFDQSxTQUFLZixHQUFMLEdBQVcsS0FBS0EsR0FBTCxDQUFTYSxJQUFULENBQWMsQ0FBQ0MsQ0FBRCxFQUFJQyxDQUFKLEtBQVVELENBQUMsQ0FBQyxDQUFELENBQUQsR0FBT0MsQ0FBQyxDQUFDLENBQUQsQ0FBUixHQUFjLENBQWQsR0FBa0IsQ0FBQyxDQUEzQyxDQUFYO0FBQ0EsU0FBS2QsTUFBTCxHQUFjLEtBQUtBLE1BQUwsQ0FBWVksSUFBWixDQUFpQixDQUFDQyxDQUFELEVBQUlDLENBQUosS0FBVUQsQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFPQyxDQUFDLENBQUMsQ0FBRCxDQUFSLEdBQWMsQ0FBZCxHQUFrQixDQUFDLENBQTlDLENBQWQ7QUFDQSxTQUFLYixPQUFMLEdBQWUsS0FBS0EsT0FBTCxDQUFhVyxJQUFiLENBQWtCLENBQUNDLENBQUQsRUFBSUMsQ0FBSixLQUFVRCxDQUFDLENBQUMsQ0FBRCxDQUFELEdBQU9DLENBQUMsQ0FBQyxDQUFELENBQVIsR0FBYyxDQUFkLEdBQWtCLENBQUMsQ0FBL0MsQ0FBZjtBQUNIOztBQUVEQyxFQUFBQSxhQUFhLEdBQUc7QUFDWixTQUFLbkIsR0FBTCxHQUFXLEVBQVg7QUFDQSxTQUFLQyxHQUFMLEdBQVcsRUFBWDtBQUNBLFNBQUtDLEdBQUwsR0FBVyxFQUFYO0FBQ0EsU0FBS0MsR0FBTCxHQUFXLEVBQVg7QUFDQSxTQUFLQyxNQUFMLEdBQWMsRUFBZDtBQUNBLFNBQUtDLE9BQUwsR0FBZSxFQUFmO0FBQ0g7O0FBbER1QiIsInNvdXJjZXMiOlsid2VicGFjazovL05CQS1TdGF0LURhc2hib2FyZC8uL3NyYy9zY3JpcHRzL3BsYXllci5qcz82NDcxIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIFBsYXllciB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICB0aGlzLmZuYW1lID0gb3B0aW9ucy5maXJzdF9uYW1lO1xuICAgICAgICB0aGlzLmxuYW1lID0gb3B0aW9ucy5sYXN0X25hbWU7XG4gICAgICAgIHRoaXMuaWQgPSBvcHRpb25zLmlkOyBcblxuICAgICAgICB0aGlzLnBwZyA9IFtdOyAvL3BvaW50cyBwZXIgZ2FtZVxuICAgICAgICB0aGlzLmFwZyA9IFtdOyAvL2Fzc2lzdHMgcGVyIGdhbWVcbiAgICAgICAgdGhpcy5ycGcgPSBbXTsgLy9yZWJvdW5kcyBwZXIgZ2FtZVxuICAgICAgICB0aGlzLnNwZyA9ICBbXTsgLy9zdGVhbHMgcGVyIGdhbWVcbiAgICAgICAgdGhpcy5mZ19wY3QgPSBbXTsgLy9mZyBwZXJjZW50YWdlXG4gICAgICAgIHRoaXMuZmczX3BjdCA9IFtdOyAvLzMgcG9pbnQgcGVyY2VudGFnZVxuICAgIH1cblxuICAgIHVwZGF0ZUF2ZXJhZ2VzKHNlYXNvbiwgYXZlcmFnZXMpIHtcbiAgICAgICAgc2Vhc29uID0gcGFyc2VJbnQoc2Vhc29uKTtcbiAgICAgICAgaWYoYXZlcmFnZXMpIHtcbiAgICAgICAgICAgIHRoaXMucHBnLnB1c2goW3NlYXNvbiwgYXZlcmFnZXMucHRzXSk7XG4gICAgICAgICAgICB0aGlzLmFwZy5wdXNoKFtzZWFzb24sIGF2ZXJhZ2VzLmFzdF0pO1xuICAgICAgICAgICAgdGhpcy5ycGcucHVzaChbc2Vhc29uLCBhdmVyYWdlcy5yZWJdKTtcbiAgICAgICAgICAgIHRoaXMuc3BnLnB1c2goW3NlYXNvbiwgYXZlcmFnZXMuc3RsXSk7XG4gICAgICAgICAgICB0aGlzLmZnX3BjdC5wdXNoKFtzZWFzb24sIGF2ZXJhZ2VzLmZnX3BjdF0pXG4gICAgICAgICAgICB0aGlzLmZnM19wY3QucHVzaChbc2Vhc29uLCBhdmVyYWdlcy5mZzNfcGN0XSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucHBnLnB1c2goW3NlYXNvbiwgMF0pO1xuICAgICAgICAgICAgdGhpcy5hcGcucHVzaChbc2Vhc29uLCAwXSk7XG4gICAgICAgICAgICB0aGlzLnJwZy5wdXNoKFtzZWFzb24sIDBdKTtcbiAgICAgICAgICAgIHRoaXMuc3BnLnB1c2goW3NlYXNvbiwgMF0pO1xuICAgICAgICAgICAgdGhpcy5mZ19wY3QucHVzaChbc2Vhc29uLCAwXSlcbiAgICAgICAgICAgIHRoaXMuZmczX3BjdC5wdXNoKFtzZWFzb24sIDBdKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuc29ydEF2ZXJhZ2VzKCk7XG4gICAgfVxuXG4gICAgc29ydEF2ZXJhZ2VzKCkge1xuICAgICAgICB0aGlzLnBwZyA9IHRoaXMucHBnLnNvcnQoKGEsIGIpID0+IGFbMF0gPiBiWzBdID8gMSA6IC0xICk7XG4gICAgICAgIHRoaXMuYXBnID0gdGhpcy5hcGcuc29ydCgoYSwgYikgPT4gYVswXSA+IGJbMF0gPyAxIDogLTEgKTtcbiAgICAgICAgdGhpcy5ycGcgPSB0aGlzLnJwZy5zb3J0KChhLCBiKSA9PiBhWzBdID4gYlswXSA/IDEgOiAtMSApO1xuICAgICAgICB0aGlzLnNwZyA9IHRoaXMuc3BnLnNvcnQoKGEsIGIpID0+IGFbMF0gPiBiWzBdID8gMSA6IC0xICk7XG4gICAgICAgIHRoaXMuZmdfcGN0ID0gdGhpcy5mZ19wY3Quc29ydCgoYSwgYikgPT4gYVswXSA+IGJbMF0gPyAxIDogLTEgKTtcbiAgICAgICAgdGhpcy5mZzNfcGN0ID0gdGhpcy5mZzNfcGN0LnNvcnQoKGEsIGIpID0+IGFbMF0gPiBiWzBdID8gMSA6IC0xICk7XG4gICAgfVxuXG4gICAgcmVzZXRBdmVyYWdlcygpIHtcbiAgICAgICAgdGhpcy5wcGcgPSBbXTtcbiAgICAgICAgdGhpcy5hcGcgPSBbXTtcbiAgICAgICAgdGhpcy5ycGcgPSBbXTtcbiAgICAgICAgdGhpcy5zcGcgPSBbXTtcbiAgICAgICAgdGhpcy5mZ19wY3QgPSBbXTtcbiAgICAgICAgdGhpcy5mZzNfcGN0ID0gW107XG4gICAgfVxufSJdLCJuYW1lcyI6WyJQbGF5ZXIiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJmbmFtZSIsImZpcnN0X25hbWUiLCJsbmFtZSIsImxhc3RfbmFtZSIsImlkIiwicHBnIiwiYXBnIiwicnBnIiwic3BnIiwiZmdfcGN0IiwiZmczX3BjdCIsInVwZGF0ZUF2ZXJhZ2VzIiwic2Vhc29uIiwiYXZlcmFnZXMiLCJwYXJzZUludCIsInB1c2giLCJwdHMiLCJhc3QiLCJyZWIiLCJzdGwiLCJzb3J0QXZlcmFnZXMiLCJzb3J0IiwiYSIsImIiLCJyZXNldEF2ZXJhZ2VzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/scripts/player.js\n");

/***/ }),

/***/ "./src/scripts/saveSVGAsPNG.js":
/*!*************************************!*\
  !*** ./src/scripts/saveSVGAsPNG.js ***!
  \*************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n//CITE: The following script was developed by Eric Shull. Github can be found here: https://github.com/exupero/saveSvgAsPng\nconst SaveSVGAsPNG = function () {\n  const out$ = typeof exports != 'undefined' && exports || typeof define != 'undefined' && {} || this || window;\n  if (typeof define !== 'undefined') define('save-svg-as-png', [], () => out$);\n  out$.default = out$;\n  const xmlNs = 'http://www.w3.org/2000/xmlns/';\n  const xhtmlNs = 'http://www.w3.org/1999/xhtml';\n  const svgNs = 'http://www.w3.org/2000/svg';\n  const doctype = '<?xml version=\"1.0\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\" [<!ENTITY nbsp \"&#160;\">]>';\n  const urlRegex = /url\\([\"']?(.+?)[\"']?\\)/;\n  const fontFormats = {\n    woff2: 'font/woff2',\n    woff: 'font/woff',\n    otf: 'application/x-font-opentype',\n    ttf: 'application/x-font-ttf',\n    eot: 'application/vnd.ms-fontobject',\n    sfnt: 'application/font-sfnt',\n    svg: 'image/svg+xml'\n  };\n\n  const isElement = obj => obj instanceof HTMLElement || obj instanceof SVGElement;\n\n  const requireDomNode = el => {\n    if (!isElement(el)) throw new Error(`an HTMLElement or SVGElement is required; got ${el}`);\n  };\n\n  const requireDomNodePromise = el => new Promise((resolve, reject) => {\n    if (isElement(el)) resolve(el);else reject(new Error(`an HTMLElement or SVGElement is required; got ${el}`));\n  });\n\n  const isExternal = url => url && url.lastIndexOf('http', 0) === 0 && url.lastIndexOf(window.location.host) === -1;\n\n  const getFontMimeTypeFromUrl = fontUrl => {\n    const formats = Object.keys(fontFormats).filter(extension => fontUrl.indexOf(`.${extension}`) > 0).map(extension => fontFormats[extension]);\n    if (formats) return formats[0];\n    console.error(`Unknown font format for ${fontUrl}. Fonts may not be working correctly.`);\n    return 'application/octet-stream';\n  };\n\n  const arrayBufferToBase64 = buffer => {\n    let binary = '';\n    const bytes = new Uint8Array(buffer);\n\n    for (let i = 0; i < bytes.byteLength; i++) binary += String.fromCharCode(bytes[i]);\n\n    return window.btoa(binary);\n  };\n\n  const getDimension = (el, clone, dim) => {\n    const v = el.viewBox && el.viewBox.baseVal && el.viewBox.baseVal[dim] || clone.getAttribute(dim) !== null && !clone.getAttribute(dim).match(/%$/) && parseInt(clone.getAttribute(dim)) || el.getBoundingClientRect()[dim] || parseInt(clone.style[dim]) || parseInt(window.getComputedStyle(el).getPropertyValue(dim));\n    return typeof v === 'undefined' || v === null || isNaN(parseFloat(v)) ? 0 : v;\n  };\n\n  const getDimensions = (el, clone, width, height) => {\n    if (el.tagName === 'svg') return {\n      width: width || getDimension(el, clone, 'width'),\n      height: height || getDimension(el, clone, 'height')\n    };else if (el.getBBox) {\n      const {\n        x,\n        y,\n        width,\n        height\n      } = el.getBBox();\n      return {\n        width: x + width,\n        height: y + height\n      };\n    }\n  };\n\n  const reEncode = data => decodeURIComponent(encodeURIComponent(data).replace(/%([0-9A-F]{2})/g, (match, p1) => {\n    const c = String.fromCharCode(`0x${p1}`);\n    return c === '%' ? '%25' : c;\n  }));\n\n  const uriToBlob = uri => {\n    const byteString = window.atob(uri.split(',')[1]);\n    const mimeString = uri.split(',')[0].split(':')[1].split(';')[0];\n    const buffer = new ArrayBuffer(byteString.length);\n    const intArray = new Uint8Array(buffer);\n\n    for (let i = 0; i < byteString.length; i++) {\n      intArray[i] = byteString.charCodeAt(i);\n    }\n\n    return new Blob([buffer], {\n      type: mimeString\n    });\n  };\n\n  const query = (el, selector) => {\n    if (!selector) return;\n\n    try {\n      return el.querySelector(selector) || el.parentNode && el.parentNode.querySelector(selector);\n    } catch (err) {\n      console.warn(`Invalid CSS selector \"${selector}\"`, err);\n    }\n  };\n\n  const detectCssFont = (rule, href) => {\n    // Match CSS font-face rules to external links.\n    // @font-face {\n    //   src: local('Abel'), url(https://fonts.gstatic.com/s/abel/v6/UzN-iejR1VoXU2Oc-7LsbvesZW2xOQ-xsNqO47m55DA.woff2);\n    // }\n    const match = rule.cssText.match(urlRegex);\n    const url = match && match[1] || '';\n    if (!url || url.match(/^data:/) || url === 'about:blank') return;\n    const fullUrl = url.startsWith('../') ? `${href}/../${url}` : url.startsWith('./') ? `${href}/.${url}` : url;\n    return {\n      text: rule.cssText,\n      format: getFontMimeTypeFromUrl(fullUrl),\n      url: fullUrl\n    };\n  };\n\n  const inlineImages = el => Promise.all(Array.from(el.querySelectorAll('image')).map(image => {\n    let href = image.getAttributeNS('http://www.w3.org/1999/xlink', 'href') || image.getAttribute('href');\n    if (!href) return Promise.resolve(null);\n\n    if (isExternal(href)) {\n      href += (href.indexOf('?') === -1 ? '?' : '&') + 't=' + new Date().valueOf();\n    }\n\n    return new Promise((resolve, reject) => {\n      const canvas = document.createElement('canvas');\n      const img = new Image();\n      img.crossOrigin = 'anonymous';\n      img.src = href;\n\n      img.onerror = () => reject(new Error(`Could not load ${href}`));\n\n      img.onload = () => {\n        canvas.width = img.width;\n        canvas.height = img.height;\n        canvas.getContext('2d').drawImage(img, 0, 0);\n        image.setAttributeNS('http://www.w3.org/1999/xlink', 'href', canvas.toDataURL('image/png'));\n        resolve(true);\n      };\n    });\n  }));\n\n  const cachedFonts = {};\n\n  const inlineFonts = fonts => Promise.all(fonts.map(font => new Promise((resolve, reject) => {\n    if (cachedFonts[font.url]) return resolve(cachedFonts[font.url]);\n    const req = new XMLHttpRequest();\n    req.addEventListener('load', () => {\n      // TODO: it may also be worth it to wait until fonts are fully loaded before\n      // attempting to rasterize them. (e.g. use https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet)\n      const fontInBase64 = arrayBufferToBase64(req.response);\n      const fontUri = font.text.replace(urlRegex, `url(\"data:${font.format};base64,${fontInBase64}\")`) + '\\n';\n      cachedFonts[font.url] = fontUri;\n      resolve(fontUri);\n    });\n    req.addEventListener('error', e => {\n      console.warn(`Failed to load font from: ${font.url}`, e);\n      cachedFonts[font.url] = null;\n      resolve(null);\n    });\n    req.addEventListener('abort', e => {\n      console.warn(`Aborted loading font from: ${font.url}`, e);\n      resolve(null);\n    });\n    req.open('GET', font.url);\n    req.responseType = 'arraybuffer';\n    req.send();\n  }))).then(fontCss => fontCss.filter(x => x).join(''));\n\n  let cachedRules = null;\n\n  const styleSheetRules = () => {\n    if (cachedRules) return cachedRules;\n    return cachedRules = Array.from(document.styleSheets).map(sheet => {\n      try {\n        return {\n          rules: sheet.cssRules,\n          href: sheet.href\n        };\n      } catch (e) {\n        console.warn(`Stylesheet could not be loaded: ${sheet.href}`, e);\n        return {};\n      }\n    });\n  };\n\n  const inlineCss = (el, options) => {\n    const {\n      selectorRemap,\n      modifyStyle,\n      modifyCss,\n      fonts,\n      excludeUnusedCss\n    } = options || {};\n\n    const generateCss = modifyCss || ((selector, properties) => {\n      const sel = selectorRemap ? selectorRemap(selector) : selector;\n      const props = modifyStyle ? modifyStyle(properties) : properties;\n      return `${sel}{${props}}\\n`;\n    });\n\n    const css = [];\n    const detectFonts = typeof fonts === 'undefined';\n    const fontList = fonts || [];\n    styleSheetRules().forEach(({\n      rules,\n      href\n    }) => {\n      if (!rules) return;\n      Array.from(rules).forEach(rule => {\n        if (typeof rule.style != 'undefined') {\n          if (query(el, rule.selectorText)) css.push(generateCss(rule.selectorText, rule.style.cssText));else if (detectFonts && rule.cssText.match(/^@font-face/)) {\n            const font = detectCssFont(rule, href);\n            if (font) fontList.push(font);\n          } else if (!excludeUnusedCss) {\n            css.push(rule.cssText);\n          }\n        }\n      });\n    });\n    return inlineFonts(fontList).then(fontCss => css.join('\\n') + fontCss);\n  };\n\n  const downloadOptions = () => {\n    if (!navigator.msSaveOrOpenBlob && !('download' in document.createElement('a'))) {\n      return {\n        popup: window.open()\n      };\n    }\n  };\n\n  out$.prepareSvg = (el, options, done) => {\n    requireDomNode(el);\n    const {\n      left = 0,\n      top = 0,\n      width: w,\n      height: h,\n      scale = 1,\n      responsive = false,\n      excludeCss = false\n    } = options || {};\n    return inlineImages(el).then(() => {\n      let clone = el.cloneNode(true);\n      clone.style.backgroundColor = (options || {}).backgroundColor || el.style.backgroundColor;\n      const {\n        width,\n        height\n      } = getDimensions(el, clone, w, h);\n\n      if (el.tagName !== 'svg') {\n        if (el.getBBox) {\n          if (clone.getAttribute('transform') != null) {\n            clone.setAttribute('transform', clone.getAttribute('transform').replace(/translate\\(.*?\\)/, ''));\n          }\n\n          const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n          svg.appendChild(clone);\n          clone = svg;\n        } else {\n          console.error('Attempted to render non-SVG element', el);\n          return;\n        }\n      }\n\n      clone.setAttribute('version', '1.1');\n      clone.setAttribute('viewBox', [left, top, width, height].join(' '));\n      if (!clone.getAttribute('xmlns')) clone.setAttributeNS(xmlNs, 'xmlns', svgNs);\n      if (!clone.getAttribute('xmlns:xlink')) clone.setAttributeNS(xmlNs, 'xmlns:xlink', 'http://www.w3.org/1999/xlink');\n\n      if (responsive) {\n        clone.removeAttribute('width');\n        clone.removeAttribute('height');\n        clone.setAttribute('preserveAspectRatio', 'xMinYMin meet');\n      } else {\n        clone.setAttribute('width', width * scale);\n        clone.setAttribute('height', height * scale);\n      }\n\n      Array.from(clone.querySelectorAll('foreignObject > *')).forEach(foreignObject => {\n        foreignObject.setAttributeNS(xmlNs, 'xmlns', foreignObject.tagName === 'svg' ? svgNs : xhtmlNs);\n      });\n\n      if (excludeCss) {\n        const outer = document.createElement('div');\n        outer.appendChild(clone);\n        const src = outer.innerHTML;\n        if (typeof done === 'function') done(src, width, height);else return {\n          src,\n          width,\n          height\n        };\n      } else {\n        return inlineCss(el, options).then(css => {\n          const style = document.createElement('style');\n          style.setAttribute('type', 'text/css');\n          style.innerHTML = `<![CDATA[\\n${css}\\n]]>`;\n          const defs = document.createElement('defs');\n          defs.appendChild(style);\n          clone.insertBefore(defs, clone.firstChild);\n          const outer = document.createElement('div');\n          outer.appendChild(clone);\n          const src = outer.innerHTML.replace(/NS\\d+:href/gi, 'xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href');\n          if (typeof done === 'function') done(src, width, height);else return {\n            src,\n            width,\n            height\n          };\n        });\n      }\n    });\n  };\n\n  out$.svgAsDataUri = (el, options, done) => {\n    requireDomNode(el);\n    return out$.prepareSvg(el, options).then(({\n      src,\n      width,\n      height\n    }) => {\n      const svgXml = `data:image/svg+xml;base64,${window.btoa(reEncode(doctype + src))}`;\n\n      if (typeof done === 'function') {\n        done(svgXml, width, height);\n      }\n\n      return svgXml;\n    });\n  };\n\n  out$.svgAsPngUri = (el, options, done) => {\n    requireDomNode(el);\n    const {\n      encoderType = 'image/png',\n      encoderOptions = 0.8,\n      canvg\n    } = options || {};\n\n    const convertToPng = ({\n      src,\n      width,\n      height\n    }) => {\n      const canvas = document.createElement('canvas');\n      const context = canvas.getContext('2d');\n      const pixelRatio = window.devicePixelRatio || 1;\n      canvas.width = width * pixelRatio;\n      canvas.height = height * pixelRatio;\n      canvas.style.width = `${canvas.width}px`;\n      canvas.style.height = `${canvas.height}px`;\n      context.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n      if (canvg) canvg(canvas, src);else context.drawImage(src, 0, 0);\n      let png;\n\n      try {\n        png = canvas.toDataURL(encoderType, encoderOptions);\n      } catch (e) {\n        if (typeof SecurityError !== 'undefined' && e instanceof SecurityError || e.name === 'SecurityError') {\n          console.error('Rendered SVG images cannot be downloaded in this browser.');\n          return;\n        } else throw e;\n      }\n\n      if (typeof done === 'function') done(png, canvas.width, canvas.height);\n      return Promise.resolve(png);\n    };\n\n    if (canvg) return out$.prepareSvg(el, options).then(convertToPng);else return out$.svgAsDataUri(el, options).then(uri => {\n      return new Promise((resolve, reject) => {\n        const image = new Image();\n\n        image.onload = () => resolve(convertToPng({\n          src: image,\n          width: image.width,\n          height: image.height\n        }));\n\n        image.onerror = () => {\n          reject(`There was an error loading the data URI as an image on the following SVG\\n${window.atob(uri.slice(26))}Open the following link to see browser's diagnosis\\n${uri}`);\n        };\n\n        image.src = uri;\n      });\n    });\n  };\n\n  out$.download = (name, uri, options) => {\n    if (navigator.msSaveOrOpenBlob) navigator.msSaveOrOpenBlob(uriToBlob(uri), name);else {\n      const saveLink = document.createElement('a');\n\n      if ('download' in saveLink) {\n        saveLink.download = name;\n        saveLink.style.display = 'none';\n        document.body.appendChild(saveLink);\n\n        try {\n          const blob = uriToBlob(uri);\n          const url = URL.createObjectURL(blob);\n          saveLink.href = url;\n\n          saveLink.onclick = () => requestAnimationFrame(() => URL.revokeObjectURL(url));\n        } catch (e) {\n          console.error(e);\n          console.warn('Error while getting object URL. Falling back to string URL.');\n          saveLink.href = uri;\n        }\n\n        saveLink.click();\n        document.body.removeChild(saveLink);\n      } else if (options && options.popup) {\n        options.popup.document.title = name;\n        options.popup.location.replace(uri);\n      }\n    }\n  };\n\n  out$.saveSvg = (el, name, options) => {\n    const downloadOpts = downloadOptions(); // don't inline, can't be async\n\n    return requireDomNodePromise(el).then(el => out$.svgAsDataUri(el, options || {})).then(uri => out$.download(name, uri, downloadOpts));\n  };\n\n  out$.saveSvgAsPng = (el, name, options) => {\n    const downloadOpts = downloadOptions(); // don't inline, can't be async\n\n    return requireDomNodePromise(el).then(el => out$.svgAsPngUri(el, options || {})).then(uri => out$.download(name, uri, downloadOpts));\n  };\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (SaveSVGAsPNG);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/saveSVGAsPNG.js\n");

/***/ }),

/***/ "./src/scripts/view.js":
/*!*****************************!*\
  !*** ./src/scripts/view.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ View; }\n/* harmony export */ });\n/* harmony import */ var _data_fetcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./data_fetcher */ \"./src/scripts/data_fetcher.js\");\n/* harmony import */ var _player__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./player */ \"./src/scripts/player.js\");\n/* harmony import */ var _data_visual__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./data_visual */ \"./src/scripts/data_visual.js\");\n/* harmony import */ var _saveSVGAsPNG__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./saveSVGAsPNG */ \"./src/scripts/saveSVGAsPNG.js\");\n\n\n\n\nclass View {\n  constructor() {\n    this.players = [];\n    this.seasons = []; //Save HTML Elements related to user search form\n\n    this.searchForm = document.querySelector(\".player-search-form\");\n    this.searchInput = document.querySelector(\".player-search-input\");\n    this.handleSearch = this.handleSearch.bind(this);\n    this.searchForm.addEventListener(\"submit\", this.handleSearch);\n    this.searchResults = document.querySelector(\".search-results\");\n    this.handleSearchResultClicked = this.handleSearchResultClicked.bind(this);\n    this.searchResults.addEventListener(\"click\", this.handleSearchResultClicked);\n    this.clearSearchResults = this.clearSearchResults.bind(this);\n    this.searchInput.addEventListener(\"input\", this.clearSearchResults); //Save HTML Elements related to selected players bar\n\n    this.selectedPlayersList = document.querySelector(\".selected-players\");\n    this.removePlayer = this.removePlayer.bind(this);\n    this.selectedPlayersList.addEventListener(\"click\", this.removePlayer); //Save HTML Elements related to user inputs\n\n    this.otherInputsForm = document.querySelector(\".other-inputs\");\n    this.startSeasonToggle = document.querySelector(\"#start-season\");\n    this.endSeasonToggle = document.querySelector(\"#end-season\");\n    this.metricToggle = document.querySelector(\"#metric\");\n    this.chartToggle = document.querySelector(\"#chart\");\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.otherInputsForm.addEventListener(\"submit\", this.handleSubmit); //Save HTML Element related to chart\n\n    this.downloadButton = document.querySelector('.download');\n    this.downloadButtonClicked = this.downloadButtonClicked.bind(this);\n    this.downloadButton.addEventListener(\"click\", this.downloadButtonClicked);\n    this.downloadButton.classList.toggle(\"hide\");\n    this.visual = new _data_visual__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\n  } //Adds player to current user selection\n\n\n  addPlayer(player) {\n    this.players.push(player);\n  } //Searches for a player and adds him if found\n\n\n  searchPlayer(query) {\n    if (query.length > 0) {\n      _data_fetcher__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getPlayer(query).then(result => {\n        let playerData = result.data;\n\n        if (playerData.length === 0) {\n          let li = document.createElement(\"li\");\n          li.innerHTML = `No players found`;\n          li.classList.add(\"no-results\");\n          this.searchResults.append(li);\n        } else if (playerData.length === 1) {\n          if (!this.alreadySelected(playerData[0])) {\n            this.addPlayer(new _player__WEBPACK_IMPORTED_MODULE_1__[\"default\"](playerData[0]));\n            this.searchInput.value = ''; //Sort by player id to match API pull\n\n            this.players = this.players.sort((a, b) => a.id > b.id ? 1 : -1);\n            this.updateSelectedPlayers();\n          } else {\n            alert(\"Player is already selected\");\n          }\n        } else {\n          playerData = playerData.sort((a, b) => a.last_name > b.last_name ? 1 : -1);\n          playerData.forEach(player => {\n            let li = document.createElement(\"li\");\n            li.innerHTML = `${player.first_name} ${player.last_name}, ${player.team.abbreviation}`;\n            li.setAttribute(\"data-first-name\", player.first_name);\n            li.setAttribute(\"data-last-name\", player.last_name);\n            li.setAttribute(\"data-id\", player.id);\n            li.classList.add(\"search-result\");\n            this.searchResults.append(li);\n          });\n        }\n      });\n    }\n  } //Event handler for \"add player / search\" button\n\n\n  handleSearch(e) {\n    e.preventDefault();\n    let input = this.searchInput.value;\n    this.searchPlayer(input);\n  } //Event handler for selecting search results\n\n\n  handleSearchResultClicked(e) {\n    if (e.target.matches('li')) {\n      let options = {\n        first_name: e.target.getAttribute(\"data-first-name\"),\n        last_name: e.target.getAttribute(\"data-last-name\"),\n        id: parseInt(e.target.getAttribute(\"data-id\"))\n      };\n\n      if (!this.alreadySelected(options)) {\n        this.addPlayer(new _player__WEBPACK_IMPORTED_MODULE_1__[\"default\"](options));\n        this.searchInput.value = ''; //Sort by player id to match API pull\n\n        this.players = this.players.sort((a, b) => a.id > b.id ? 1 : -1);\n        this.updateSelectedPlayers();\n      } else {\n        alert(\"Player is already selected\");\n      }\n    }\n  }\n\n  clearSearchResults(e) {\n    //Reset the search results list\n    while (this.searchResults.firstChild) {\n      this.searchResults.removeChild(this.searchResults.firstChild);\n    }\n  } //Gets the season averages for all seasons selected by user\n\n\n  iterateSeasons(start, end, numSeasons) {\n    for (let i = start; i <= end; i++) {\n      this.getSeasonAverages(i, numSeasons);\n    }\n  } //Event handler for \"visualize data\" button\n  //Reset player averages and currently selected seasons\n  //Fetch new season data\n\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    if (this.players.length === 0) {\n      alert(\"Please select a player first\");\n    } else {\n      if (!this.downloadButton.classList.contains(\"hide\")) {\n        this.downloadButton.classList.toggle(\"hide\");\n      }\n\n      this.reset();\n      let start = this.startSeasonToggle.value;\n      let end = this.endSeasonToggle.value;\n      let numSeasons = parseInt(end) - parseInt(start) + 1;\n\n      if (parseInt(end) >= parseInt(start)) {\n        this.iterateSeasons(start, end, numSeasons);\n      } else {\n        alert(\"End Season can't be before Start Season\");\n      }\n    }\n  } //Gets the season data for one season\n  //If we have hit the end season input, do what we need with data\n\n\n  getSeasonAverages(season, numSeasons) {\n    _data_fetcher__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getSeasonAverages(season, this.players).then(data => {\n      let averages = data.data; // //Sort by player id to match API pull\n      // this.players = this.players.sort((a, b) => a.id > b.id ? 1 : -1);\n      //Loop handles updating player data for correct player\n      //Need to keep track of averages idx because of the way\n      //API returns data.\n\n      let averages_idx = 0;\n      this.players.forEach(player => {\n        if (averages && averages_idx < averages.length && averages[averages_idx].player_id === player.id) {\n          player.updateAverages(parseInt(season), averages[averages_idx]);\n          averages_idx++;\n        } else {\n          player.updateAverages(parseInt(season));\n        }\n      });\n    }).then(res => {\n      //It doesn't matter what order the stats come in, just need\n      //to make sure that we have them all before doing anything else\n      this.seasons.push(parseInt(season));\n      this.seasons = this.seasons.sort();\n\n      if (this.seasons.length === numSeasons) {\n        let chartData = this.getChartData(this.metricToggle.value);\n        this.visual.reset();\n        this.visual.drawChart(this.chartToggle.value, this.seasons, chartData);\n        setTimeout(() => this.downloadButton.classList.toggle(\"hide\"), 1500);\n      }\n    });\n  } //Resets player average arrays and seasons array in preparation for new data\n\n\n  reset() {\n    this.players.forEach(player => player.resetAverages());\n    this.seasons = [];\n  } //returns the selected metric array for a given player \n\n\n  getMetric(metric, player) {\n    switch (metric) {\n      case \"ppg\":\n        return player.ppg;\n\n      case \"apg\":\n        return player.apg;\n\n      case \"rpg\":\n        return player.rpg;\n\n      case \"spg\":\n        return player.spg;\n\n      case \"fg_pct\":\n        return player.fg_pct;\n\n      case \"fg3_pct\":\n        return player.fg3_pct;\n\n      default:\n        break;\n    }\n  }\n\n  getChartData(metric) {\n    //Data must be organized differently depending on chart selected\n    let chartData = [];\n\n    if (this.chartToggle.value === \"line\") {\n      let metricLabel = this.metricToggle.value;\n      this.players.forEach(player => {\n        let metricData = this.getMetric(metric, player);\n        metricData.forEach(metric => {\n          chartData.push({\n            season: metric[0],\n            name: `${player.fname} ${player.lname}`,\n            metric: metric[1],\n            metricLabel: metricLabel\n          });\n        });\n      });\n    } else if (this.chartToggle.value === \"bar\") {\n      let metricLabel = this.metricToggle.value;\n      this.seasons.forEach((season, idx) => {\n        let row = {\n          \"season\": season\n        };\n        this.players.forEach(player => {\n          row[`${player.fname} ${player.lname}`] = this.getMetric(metric, player)[idx][1];\n        });\n        row[`metricLabel`] = metricLabel;\n        chartData.push(row);\n      });\n    }\n\n    return chartData;\n  }\n\n  alreadySelected(playerData) {\n    let found = false;\n    this.players.forEach(player => {\n      if (player.id === playerData.id) found = true;\n    });\n    return found;\n  }\n\n  removePlayer(e) {\n    if (e.target.matches('button')) {\n      let idx = e.target.id;\n      this.players.splice(idx, 1);\n      this.updateSelectedPlayers();\n    }\n  }\n\n  updateSelectedPlayers() {\n    //Reset the selected players list\n    while (this.selectedPlayersList.firstChild) {\n      this.selectedPlayersList.removeChild(this.selectedPlayersList.firstChild);\n    } //Reset the search results list\n\n\n    while (this.searchResults.firstChild) {\n      this.searchResults.removeChild(this.searchResults.firstChild);\n    } //Append all players to the list\n\n\n    this.players.forEach((player, idx) => {\n      let li = document.createElement(\"li\");\n      li.classList.add(\"selected-player\");\n      let label = document.createElement(\"label\");\n      label.classList.add(\"selected-player-label\");\n      label.innerHTML = `${player.fname} ${player.lname}`;\n      let button = document.createElement(\"button\");\n      button.classList.add(\"remove-player-button\");\n      button.id = `${idx}`;\n      button.innerHTML = \"x\";\n      li.append(label);\n      li.append(button);\n      this.selectedPlayersList.append(li);\n    });\n  }\n\n  downloadButtonClicked(e) {\n    saveSvgAsPng(document.getElementById(\"svg\"), \"diagram.png\", {\n      backgroundColor: \"white\"\n    });\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/view.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9OQkEtU3RhdC1EYXNoYm9hcmQvLi9zcmMvaW5kZXguc2Nzcz85NzQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;